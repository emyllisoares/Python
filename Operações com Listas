#OPERAÇÕES BÁSICAS COM LISTAS 
#Atribuição 
lista1 = [1, 3, 5, 7]
lista2 = [2, 4, 6, 8]

lista1 == lista2
#Retorna False

5 in lista1
#Retorna True

2 in lista1
#Retorna False

#FUNÇÃO LIST()
#Basicamente cria uma nova lista 
frase = "Python é uma linguagem de programação"
lista_caracteres = list(frase)  
#Cria uma lista com cada caractere da string
print(lista_caracteres)
#['P', 'y', 't', 'h', 'o', 'n', ' ', 'é', ' ', 'u', 'm', 'a', ' ', 'l', 'i', 'n', 'g', 'u', 'a', 'g', 'e', 'm', ' ', 'd', 'e', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'a', 'ç', 'ã', 'o']

#não é possível concatenar listas com strings diretamente
#Exemplo:
lista_letras = ['P', 'y', 't', 'h', 'o', 'n']
lista_letras + list(frase)
#Retorna ['P', 'y', 't', 'h', 'o', 'n', 'P', 'y', 't', 'h', 'o', 'n', ' ', 'é', ' ', 'u', 'm', 'a', ' ', 'l', 'i', 'n', 'g', 'u', 'a', 'g', 'e', 'm', ' ', 'd', 'e', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'a', 'ç', 'ã', 'o']

#Indexação e Fatiamento de listas 
#lista1[0] -> retorna 1
#lista1[4] -> erro 
#lista1[-1] -> retorna 7
#lista1[-4] -> retorna 1

#lista1[1:3] -> retorna [3, 5]
#lista1[2:] -> retorna [5, 7]
lista_caracteres[0::2]
#Retorna ['P', 't', 'o', ' ', 'u', 'a', 'l', 'g', 'g', ' ', 'd', ' ', 'p', 'o', 'g', 'a', 'ç', 'ã']
lista1[::-1]
#Retorna [7, 5, 3, 1]

#Modificação de itens de uma lista 
lista1[0] = 10
#Agora lista1 é [10, 3, 5, 7]
lista3 = lista1
lista3 = [10, 3, 5, 7]
lista3[0] = 5
#Agora lista3 é [5, 3, 5, 7] e lista1 também mudou [5, 3, 5, 7]
#Quando se atribui uma lista a outra, ambas apontam para o mesmo local na memória (Ponteiro)

#FUNÇÕES BUILT-IN PARA LISTAS
#len() -> Retorna o tamanho da lista
len(lista1) #Retorna 4
#sum() -> Retorna a soma dos elementos da lista
sum(lista1) #Retorna 20
#any() -> Retorna True se qualquer elemento da lista for verdadeiro
lista_logica = [False, False, True] #Retorna True
#all() -> Retorna True se todos os elementos da lista forem verdadeiros
all(lista_logica) #Retorna False
#max() -> Retorna o maior elemento da lista
#min() -> Retorna o menor elemento da lista
#sorted() -> Retorna uma nova lista (cópia) ordenada
lista_numeros = [4, 1, 3, 2]
lista_ordenada = sorted(lista_numeros) #Retorna [1, 2, 3, 4]

#append() -> Adiciona um elemento ao final da lista
cidades = ['São Paulo', 'Rio de Janeiro']
cidades.append('Goiânia')
#Agora cidades é ['São Paulo', 'Rio de Janeiro', 'Goiânia']

#count() -> Conta quantas vezes um elemento aparece na lista
cidades.count('Goiânia') #Retorna 1

#insert() -> Insere um elemento em uma posição específica
cidades.insert(1, 'Belo Horizonte')
#Agora cidades é ['São Paulo', 'Belo Horizonte', 'Rio de Janeiro', 'Goiânia']

#index -> Retorna o índice da primeira ocorrência de um elemento
cidades.index('Rio de Janeiro') #Retorna 2

#remove() -> Remove a primeira ocorrência de um elemento
cidades.remove('Goiânia') 
#Agora cidades é ['São Paulo', 'Belo Horizonte', 'Rio de Janeiro']

#sort() -> Ordena a lista in-place (modifica a lista original)
cidades.sort()
#Agora cidades são ['Belo Horizonte', 'Rio de Janeiro', 'São Paulo']

#reverse() -> Inverte a ordem dos elementos da lista in-place
cidades.reverse()
#Agora cidades são ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte']

#pop() -> Remove e retorna o último elemento da lista
cidades.pop(2) #Retorna 'Belo Horizonte' e agora cidades são ['São Paulo', 'Rio de Janeiro']
